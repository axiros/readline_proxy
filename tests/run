#!/usr/bin/env python

'''
Testing readline requires a real terminal, we need to use pty

Have not really understood \r vs \r\n in pty mode, but the tests seem to be realistic.
'''

import os,sys,time,thread
import Queue
from operator import contains
script = os.path.abspath(sys.argv[1])
os.chdir(script.rsplit('/', 1)[0])

stdout = Queue.Queue()
pid,fd = os.forkpty()

def in_reader():
    while 1:
        # \r\n vs \n is not of interest:
        stdout.put(os.read(fd, 1000).replace('\r', ''))

def get_res():
    res = ''
    while 1:
        try:
            res += stdout.get(timeout=0.1)
        except Queue.Empty:
            return res

def check(op, what):
    r = get_res()
    if not op(r, what):
        raise Exception('Expected \n<snip>\n%s</snip>\n %s "%s"' % (
            r, op.__name__, what))

expect = lambda what: check(contains, what)

def send(s, term='\n'):
    time.sleep(0.05)
    os.write(fd, s + term)
    #os.write(fd, s + '\r')

if pid == 0:
    os.execv('/bin/bash',['/bin/bash'])
    time.sleep(100) # this is new!
    sys.exit(0)

def title(*msg):
    pref = '' if msg[0][0] == msg[0][0].upper() else 'Testing '
    msg = ' '.join([str(s).strip() for s in msg])
    print(pref + msg)

output = os.read(fd,1024)
thread.start_new_thread(in_reader, ())


title('Clearing history')
send('history -c')
expect('$')

title('the test - does autocomplete work')
send('ls -lta ../readline_pr\t') # :-)))
expect('.travis.yml')

title('sourcing', script)
send('source "%s"' % script)
send('source "%s"' % script)
expect('already in')

title('autocomplete')
send('ls -lta ../readline_pr\t')
expect('.travis.yml')

title('multiline')
send('for i in hey 2; do')
expect('2; do\n> ')
send('echo $i$i')
send('done')
expect('echo $i$i\n> done\nheyhey\n22')

title('here doc')
send('cat << xx')
send('first line')
send('  second line')
send('xx')
expect('cat << xx\n> first line\n>   second line\n> xx\nfirst line\n  second line')

title('here strings')
send('read a b <<< "foo bar"')
send('echo "$a.$b"')
expect('foo.bar')

title('python singleline')
send(' print(17*17)\r')
expect('289')

title('python multiline')
send(' for i in range(100):', term='\r')
send('    print(i)', term='\r')
send('.', term='\r')
expect('42')

title('rl_special_keywords')
send('rl_special_keywords="print\nos\nsys\n"')
send('print(18*18)\r') # no space needed now
expect('324')

title('python multiline - semicolon sep')
send(' import sys;', term='\r')
send('print (sys.version_info).', term='\r')
expect('releaselevel')

title('eval function overloading') # directly printing the result now
f  = 'rl_special_cmd () '
f += '{ python -c "import sys; print(\'result: \' + str($rl_cmd))"; }'
send(f)
send('sys.version_info', term='\r') # no space needed now
expect('result: sys.version_info(major')

title('subshell')
send('( echo line1;')
send('echo line2')
send(')')
expect('line1\nline2')

title('functions')
send('myfunc () {')
send(' echo infunc$1')
send('}')
send('myfunc foo')
expect('infuncfoo')

title('dollar and dot forced ml switches')
send('( echo foo$', term='\r')
send('echo bar).', term='\r')
expect('foo\nbar')

title('multiline assigns')
send('myvar="foo$', term='\r') # The need for $ sucks. we really should detect this.
send('baz".', term='\r')
send('echo -e "$myvar"')
expect('foo\nbaz')

title('history')
send('!8')
expect('289')

send('history')
print(get_res())


print( '\n\nsuccessfully tested' )
